
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 13 09:29:39 CET 2016
//----------------------------------------------------

package ppdz;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 13 09:29:39 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\010\000\002\002\004\000\002\050" +
    "\003\000\002\037\004\000\002\037\002\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\006\000" +
    "\002\041\005\000\002\007\003\000\002\007\005\000\002" +
    "\003\005\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\042\005\000\002\042\005" +
    "\000\002\043\003\000\002\043\005\000\002\044\003\000" +
    "\002\044\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\061\002\000\002\011\006\000\002\006\010" +
    "\000\002\006\010\000\002\006\005\000\002\045\004\000" +
    "\002\045\002\000\002\012\004\000\002\062\002\000\002" +
    "\012\005\000\002\012\002\000\002\063\002\000\002\013" +
    "\015\000\002\064\002\000\002\065\002\000\002\013\016" +
    "\000\002\052\003\000\002\036\002\000\002\066\002\000" +
    "\002\034\005\000\002\034\002\000\002\035\003\000\002" +
    "\005\004\000\002\005\002\000\002\020\003\000\002\020" +
    "\005\000\002\020\003\000\002\020\002\000\002\021\004" +
    "\000\002\021\006\000\002\067\002\000\002\015\005\000" +
    "\002\015\002\000\002\014\003\000\002\014\003\000\002" +
    "\070\002\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\007\000\002\016\011\000\002\016\005\000\002" +
    "\016\007\000\002\016\007\000\002\016\005\000\002\017" +
    "\005\000\002\017\007\000\002\017\005\000\002\024\005" +
    "\000\002\024\005\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\025\003\000\002\025\005\000\002" +
    "\025\006\000\002\025\006\000\002\023\003\000\002\023" +
    "\005\000\002\027\003\000\002\027\005\000\002\026\003" +
    "\000\002\026\005\000\002\056\005\000\002\056\004\000" +
    "\002\056\003\000\002\055\003\000\002\057\003\000\002" +
    "\057\005\000\002\060\003\000\002\060\003\000\002\071" +
    "\002\000\002\060\006\000\002\060\003\000\002\060\003" +
    "\000\002\060\004\000\002\060\007\000\002\060\003\000" +
    "\002\060\005\000\002\060\006\000\002\046\003\000\002" +
    "\054\003\000\002\053\005\000\002\053\006\000\002\053" +
    "\006\000\002\053\003\000\002\047\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\004\005\001\002\000\004\002\377\001" +
    "\002\000\004\057\007\001\002\000\012\005\ufffd\011\020" +
    "\020\017\057\012\001\002\000\012\005\uffff\011\uffff\020" +
    "\uffff\057\uffff\001\002\000\006\003\370\057\042\001\002" +
    "\000\012\005\ufffc\011\ufffc\020\ufffc\057\ufffc\001\002\000" +
    "\052\003\uff9c\010\uff9c\012\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\034\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\057\uff9c\001\002\000\012\005\ufffb\011\ufffb\020\ufffb\057" +
    "\ufffb\001\002\000\012\005\ufffa\011\ufffa\020\ufffa\057\ufffa" +
    "\001\002\000\012\005\ufffd\011\020\020\017\057\012\001" +
    "\002\000\004\005\354\001\002\000\006\003\041\057\042" +
    "\001\002\000\006\003\022\057\012\001\002\000\004\057" +
    "\026\001\002\000\004\012\023\001\002\000\012\005\ufff8" +
    "\011\ufff8\020\ufff8\057\ufff8\001\002\000\004\012\037\001" +
    "\002\000\006\012\ufff7\014\035\001\002\000\004\013\027" +
    "\001\002\000\012\053\030\054\033\055\032\056\031\001" +
    "\002\000\006\012\ufff4\014\ufff4\001\002\000\006\012\ufff1" +
    "\014\ufff1\001\002\000\006\012\ufff2\014\ufff2\001\002\000" +
    "\006\012\ufff3\014\ufff3\001\002\000\006\012\ufff5\014\ufff5" +
    "\001\002\000\004\057\026\001\002\000\004\012\ufff6\001" +
    "\002\000\012\005\ufff9\011\ufff9\020\ufff9\057\ufff9\001\002" +
    "\000\010\003\045\005\uffde\021\044\001\002\000\004\006" +
    "\043\001\002\000\066\003\uff88\005\uff88\007\uff88\010\uff88" +
    "\012\uff88\013\uff88\014\uff88\016\uff88\017\uff88\021\uff88\032" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\041\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050" +
    "\uff88\051\uff88\052\uff88\001\002\000\012\005\uffe0\011\uffe0" +
    "\020\uffe0\057\uffe0\001\002\000\004\057\042\001\002\000" +
    "\004\005\350\001\002\000\004\005\047\001\002\000\010" +
    "\006\uffda\015\054\057\012\001\002\000\006\003\075\057" +
    "\335\001\002\000\010\006\uffda\015\054\057\012\001\002" +
    "\000\010\006\uffdc\015\uffdc\057\uffdc\001\002\000\004\006" +
    "\331\001\002\000\004\057\uffd7\001\002\000\004\057\056" +
    "\001\002\000\004\007\uffd4\001\002\000\004\007\060\001" +
    "\002\000\010\003\062\010\uffc9\057\012\001\002\000\004" +
    "\057\042\001\002\000\004\010\uffca\001\002\000\004\010" +
    "\067\001\002\000\006\010\uffcc\014\065\001\002\000\010" +
    "\003\062\010\uffc9\057\012\001\002\000\004\010\uffcb\001" +
    "\002\000\006\005\uffcd\057\012\001\002\000\004\005\110" +
    "\001\002\000\006\003\075\057\042\001\002\000\006\005" +
    "\uffcd\057\012\001\002\000\004\005\uffce\001\002\000\010" +
    "\012\uffe5\014\uffe5\016\uffe4\001\002\000\006\005\103\012" +
    "\104\001\002\000\006\012\uffe7\014\101\001\002\000\004" +
    "\012\100\001\002\000\012\005\uffea\006\uffea\015\uffea\057" +
    "\uffea\001\002\000\004\057\042\001\002\000\004\012\uffe6" +
    "\001\002\000\012\005\uffe8\006\uffe8\015\uffe8\057\uffe8\001" +
    "\002\000\012\005\uffe9\006\uffe9\015\uffe9\057\uffe9\001\002" +
    "\000\004\016\106\001\002\000\004\017\107\001\002\000" +
    "\006\012\uffe3\014\uffe3\001\002\000\026\005\uffd6\006\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\057\uffd6\001\002\000\026\005\114\006\uffc4\022\115" +
    "\023\113\024\131\025\126\026\125\027\130\030\123\057" +
    "\042\001\002\000\026\005\uffc2\006\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\057\uffc2\001" +
    "\002\000\004\007\322\001\002\000\026\005\114\006\uffc4" +
    "\022\115\023\113\024\131\025\126\026\125\027\130\030" +
    "\123\057\042\001\002\000\004\007\137\001\002\000\026" +
    "\005\uffc3\006\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\057\uffc3\001\002\000\004\006\314" +
    "\001\002\000\060\007\uff89\010\uff89\012\uff89\013\uff89\014" +
    "\uff89\016\uff89\017\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\001\002" +
    "\000\012\007\uff8e\013\306\032\304\033\303\001\002\000" +
    "\004\007\272\001\002\000\004\007\137\001\002\000\026" +
    "\005\uffc6\006\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\057\uffc6\001\002\000\004\007\253" +
    "\001\002\000\024\007\146\012\251\037\151\040\153\053" +
    "\147\054\143\055\157\056\142\057\042\001\002\000\060" +
    "\007\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d\016\241\017" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\242\037\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\001\002\000\024\005\114" +
    "\022\133\023\113\024\131\025\126\026\125\027\130\030" +
    "\135\057\042\001\002\000\004\012\132\001\002\000\030" +
    "\005\uffba\006\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\057\uffba\001\002\000\004" +
    "\007\137\001\002\000\004\022\234\001\002\000\004\007" +
    "\137\001\002\000\024\005\114\022\133\023\113\024\131" +
    "\025\126\026\125\027\130\030\135\057\042\001\002\000" +
    "\024\003\152\007\146\037\151\040\153\053\147\054\143" +
    "\055\157\056\142\057\042\001\002\000\046\007\uff8e\010" +
    "\uff91\012\uff91\014\uff91\017\uff91\034\uff91\035\uff91\037\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\001\002\000\044\010\uff9b" +
    "\012\uff9b\014\uff9b\017\uff9b\034\uff9b\035\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\227\051\225\052\224\001\002\000\044\010\uff94\012" +
    "\uff94\014\uff94\017\uff94\034\uff94\035\uff94\037\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\001\002\000\044\010\uff98\012\uff98" +
    "\014\uff98\017\uff98\034\uff98\035\uff98\037\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\001\002\000\010\010\uffa3\034\222\035" +
    "\uffa3\001\002\000\030\010\uffa1\034\uffa1\035\uffa1\037\170" +
    "\041\166\042\220\043\212\044\215\045\216\046\217\047" +
    "\213\001\002\000\022\007\146\037\151\040\153\053\147" +
    "\054\143\055\157\056\142\057\042\001\002\000\044\010" +
    "\uff99\012\uff99\014\uff99\017\uff99\034\uff99\035\uff99\037\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\001\002\000\004\007\175" +
    "\001\002\000\020\007\146\040\153\053\147\054\143\055" +
    "\157\056\142\057\042\001\002\000\004\010\173\001\002" +
    "\000\004\057\012\001\002\000\006\010\uffa5\035\161\001" +
    "\002\000\036\010\uff9d\012\uff9d\014\uff9d\017\uff9d\034\uff9d" +
    "\035\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\001\002\000\004\010\160\001\002" +
    "\000\044\010\uff95\012\uff95\014\uff95\017\uff95\034\uff95\035" +
    "\uff95\037\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\001\002\000" +
    "\026\005\uffae\012\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\057\uffae\001\002\000\022\007" +
    "\146\037\151\040\153\053\147\054\143\055\157\056\142" +
    "\057\042\001\002\000\004\010\uffa4\001\002\000\046\010" +
    "\uff93\012\uff93\014\uff93\016\164\017\uff93\034\uff93\035\uff93" +
    "\037\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\001\002\000\022" +
    "\007\146\037\151\040\153\053\147\054\143\055\157\056" +
    "\142\057\042\001\002\000\010\017\167\037\170\041\166" +
    "\001\002\000\020\007\uff81\040\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\001\002\000\044\010\uff92\012\uff92" +
    "\014\uff92\017\uff92\034\uff92\035\uff92\037\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\001\002\000\020\007\uff80\040\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\001\002\000\020" +
    "\007\146\040\153\053\147\054\143\055\157\056\142\057" +
    "\042\001\002\000\036\010\uff9f\012\uff9f\014\uff9f\017\uff9f" +
    "\034\uff9f\035\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\001\002\000\026\005\uffad" +
    "\012\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\057\uffad\001\002\000\036\010\uff9e\012\uff9e" +
    "\014\uff9e\017\uff9e\034\uff9e\035\uff9e\037\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\001\002" +
    "\000\024\007\146\010\200\037\151\040\153\053\147\054" +
    "\143\055\157\056\142\057\042\001\002\000\012\010\uffa9" +
    "\014\202\037\170\041\166\001\002\000\004\010\201\001" +
    "\002\000\044\010\uff90\012\uff90\014\uff90\017\uff90\034\uff90" +
    "\035\uff90\037\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\001\002" +
    "\000\044\010\uff8f\012\uff8f\014\uff8f\017\uff8f\034\uff8f\035" +
    "\uff8f\037\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\001\002\000" +
    "\024\003\204\007\146\037\151\040\153\053\147\054\143" +
    "\055\157\056\142\057\042\001\002\000\004\010\uffa8\001" +
    "\002\000\006\010\206\014\205\001\002\000\004\010\uffa7" +
    "\001\002\000\004\010\uffa6\001\002\000\010\010\uff97\037" +
    "\170\041\166\001\002\000\004\010\211\001\002\000\044" +
    "\010\uff96\012\uff96\014\uff96\017\uff96\034\uff96\035\uff96\037" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\001\002\000\022\007" +
    "\uff86\037\uff86\040\uff86\053\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\uff86\001\002\000\022\007\uff82\037\uff82\040\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\057\uff82\001\002\000\022" +
    "\007\146\037\151\040\153\053\147\054\143\055\157\056" +
    "\142\057\042\001\002\000\022\007\uff85\037\uff85\040\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\001\002\000" +
    "\022\007\uff84\037\uff84\040\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\001\002\000\022\007\uff83\037\uff83\040" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\001\002" +
    "\000\022\007\uff87\037\uff87\040\uff87\053\uff87\054\uff87\055" +
    "\uff87\056\uff87\057\uff87\001\002\000\014\010\uffa0\034\uffa0" +
    "\035\uffa0\037\170\041\166\001\002\000\022\007\146\037" +
    "\151\040\153\053\147\054\143\055\157\056\142\057\042" +
    "\001\002\000\006\010\uffa2\035\uffa2\001\002\000\020\007" +
    "\uff7d\040\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\001\002\000\020\007\uff7e\040\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\057\uff7e\001\002\000\020\007\146\040\153" +
    "\053\147\054\143\055\157\056\142\057\042\001\002\000" +
    "\020\007\uff7f\040\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\001\002\000\036\010\uff9a\012\uff9a\014\uff9a\017" +
    "\uff9a\034\uff9a\035\uff9a\037\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\001\002\000\004\031" +
    "\232\001\002\000\024\005\114\022\133\023\113\024\131" +
    "\025\126\026\125\027\130\030\135\057\042\001\002\000" +
    "\030\005\uffb3\006\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\057\uffb3\001\002\000" +
    "\004\007\137\001\002\000\004\012\236\001\002\000\030" +
    "\005\uffb4\006\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\057\uffb4\001\002\000\024" +
    "\005\114\022\133\023\113\024\131\025\126\026\125\027" +
    "\130\030\135\057\042\001\002\000\030\005\uffb2\006\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\057\uffb2\001\002\000\024\003\245\007\146" +
    "\037\151\040\153\053\147\054\143\055\157\056\142\057" +
    "\042\001\002\000\004\057\042\001\002\000\060\007\uff8c" +
    "\010\uff8c\012\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\001\002\000\010\017\247\037\170" +
    "\041\166\001\002\000\004\017\246\001\002\000\060\007" +
    "\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a\017\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\052\uff8a\001\002\000\060\007\uff8b\010" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\016\uff8b\017\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\001\002\000\010\012\252\037\170\041" +
    "\166\001\002\000\030\005\uffb9\006\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\057" +
    "\uffb9\001\002\000\030\005\uffb8\006\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\057" +
    "\uffb8\001\002\000\022\007\146\037\151\040\153\053\147" +
    "\054\143\055\157\056\142\057\042\001\002\000\012\010" +
    "\256\014\255\037\170\041\166\001\002\000\004\053\260" +
    "\001\002\000\004\012\257\001\002\000\030\005\uffb7\006" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\057\uffb7\001\002\000\004\010\261\001" +
    "\002\000\004\012\262\001\002\000\030\005\uffb6\006\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\057\uffb6\001\002\000\026\005\114\006\uffc4" +
    "\022\115\023\113\024\131\025\126\026\125\027\130\030" +
    "\123\057\042\001\002\000\004\006\uffc5\001\002\000\024" +
    "\005\114\022\115\023\113\024\131\025\126\026\125\027" +
    "\130\030\123\057\042\001\002\000\030\005\uffc3\006\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\270\057\uffc3\001\002\000\026\005\uffb1\006\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\057\uffb1\001\002\000\024\005\114\022\115\023\113" +
    "\024\131\025\126\026\125\027\130\030\123\057\042\001" +
    "\002\000\026\005\uffb0\006\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\057\uffb0\001\002\000" +
    "\026\003\274\007\146\010\273\037\151\040\153\053\147" +
    "\054\143\055\157\056\142\057\042\001\002\000\004\012" +
    "\302\001\002\000\004\010\300\001\002\000\004\010\276" +
    "\001\002\000\004\012\277\001\002\000\030\005\uffbd\006" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\057\uffbd\001\002\000\004\012\301\001" +
    "\002\000\030\005\uffbc\006\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\057\uffbc\001" +
    "\002\000\030\005\uffbe\006\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\057\uffbe\001" +
    "\002\000\004\012\uffaa\001\002\000\004\012\uffab\001\002" +
    "\000\004\012\uffc1\001\002\000\024\003\310\007\146\037" +
    "\151\040\153\053\147\054\143\055\157\056\142\057\042" +
    "\001\002\000\010\012\uffac\037\170\041\166\001\002\000" +
    "\004\012\311\001\002\000\030\005\uffbf\006\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\057\uffbf\001\002\000\004\012\313\001\002\000\030" +
    "\005\uffc0\006\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\057\uffc0\001\002\000\010" +
    "\006\uffd3\015\uffd3\057\uffd3\001\002\000\010\006\uffd5\015" +
    "\uffd5\057\uffd5\001\002\000\024\005\114\022\115\023\113" +
    "\024\131\025\126\026\125\027\130\030\123\057\042\001" +
    "\002\000\026\005\uffaf\006\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\057\uffaf\001\002\000" +
    "\004\006\321\001\002\000\030\005\uffb5\006\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\057\uffb5\001\002\000\004\057\042\001\002\000\004" +
    "\010\324\001\002\000\004\012\325\001\002\000\030\005" +
    "\uffbb\006\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\057\uffbb\001\002\000\010\010" +
    "\uffc8\014\uffc8\016\327\001\002\000\004\017\330\001\002" +
    "\000\006\010\uffc7\014\uffc7\001\002\000\012\005\uffe2\011" +
    "\uffe2\020\uffe2\057\uffe2\001\002\000\010\006\uffda\015\054" +
    "\057\012\001\002\000\004\006\uffdb\001\002\000\004\006" +
    "\uffdd\001\002\000\012\007\uffd4\012\uff88\014\uff88\016\uff88" +
    "\001\002\000\004\007\337\001\002\000\010\003\062\010" +
    "\uffc9\057\012\001\002\000\004\010\341\001\002\000\006" +
    "\005\uffcd\057\012\001\002\000\004\005\343\001\002\000" +
    "\026\005\uffd9\006\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\057\uffd9\001\002\000\026\005" +
    "\114\006\uffc4\022\115\023\113\024\131\025\126\026\125" +
    "\027\130\030\123\057\042\001\002\000\004\006\346\001" +
    "\002\000\010\006\uffd3\015\uffd3\057\uffd3\001\002\000\010" +
    "\006\uffd8\015\uffd8\057\uffd8\001\002\000\010\006\uffda\015" +
    "\054\057\012\001\002\000\004\006\352\001\002\000\012" +
    "\005\uffe1\011\uffe1\020\uffe1\057\uffe1\001\002\000\004\005" +
    "\uffdf\001\002\000\010\006\uffd0\015\054\057\012\001\002" +
    "\000\004\057\056\001\002\000\010\006\uffd2\015\uffd2\057" +
    "\uffd2\001\002\000\010\006\uffcf\015\uffcf\057\uffcf\001\002" +
    "\000\004\006\361\001\002\000\004\002\001\001\002\000" +
    "\010\006\uffd0\015\054\057\012\001\002\000\004\006\uffd1" +
    "\001\002\000\004\005\ufffe\001\002\000\010\012\uffec\014" +
    "\uffec\016\375\001\002\000\006\012\uffee\014\373\001\002" +
    "\000\004\012\372\001\002\000\004\012\371\001\002\000" +
    "\012\005\uffef\011\uffef\020\uffef\057\uffef\001\002\000\012" +
    "\005\ufff0\011\ufff0\020\ufff0\057\ufff0\001\002\000\004\057" +
    "\042\001\002\000\004\012\uffed\001\002\000\004\017\376" +
    "\001\002\000\006\012\uffeb\014\uffeb\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\050\005\001\001\000\016\006\013\037\015\040\014" +
    "\041\010\042\012\055\007\001\001\000\002\001\001\000" +
    "\010\043\366\044\365\047\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\013\037\363\040\014\041\010\042\012\055\007" +
    "\001\001\000\002\001\001\000\004\047\037\001\001\000" +
    "\004\055\020\001\001\000\006\003\024\007\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\024\007\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\050\012\052\013\051\055\047" +
    "\001\001\000\012\010\076\011\075\047\073\052\335\001" +
    "\001\000\012\004\050\012\333\013\051\055\047\001\001" +
    "\000\004\062\331\001\001\000\002\001\001\000\004\064" +
    "\054\001\001\000\004\052\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\062\021\063\055\060\001" +
    "\001\000\004\047\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\065\021\063\055" +
    "\060\001\001\000\002\001\001\000\010\004\071\005\067" +
    "\055\070\001\001\000\002\001\001\000\010\010\076\011" +
    "\075\047\073\001\001\000\010\004\071\005\072\055\070" +
    "\001\001\000\002\001\001\000\004\061\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\101\011\075\047\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\110\001\001\000\022\014\123\015\116\016\115\017\111" +
    "\046\121\047\117\053\126\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\123\015\317\016\115" +
    "\017\111\046\121\047\117\053\126\054\120\001\001\000" +
    "\004\024\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\304\001\001\000\002\001" +
    "\001\000\004\024\264\001\001\000\004\067\262\001\001" +
    "\000\002\001\001\000\020\046\147\047\117\053\126\054" +
    "\137\056\247\057\154\060\140\001\001\000\002\001\001" +
    "\000\014\016\133\046\121\047\117\053\126\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\236" +
    "\001\001\000\002\001\001\000\004\024\135\001\001\000" +
    "\014\016\230\046\121\047\117\053\126\054\120\001\001" +
    "\000\026\023\155\026\143\027\153\046\147\047\117\053" +
    "\126\054\137\056\144\057\154\060\140\001\001\000\002" +
    "\001\001\000\004\033\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\213\031\170" +
    "\001\001\000\020\046\147\047\117\053\126\054\137\056" +
    "\206\057\154\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\046\147\047\117\053\126\054\137\057" +
    "\173\060\140\001\001\000\002\001\001\000\004\055\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\023\161" +
    "\026\143\027\153\046\147\047\117\053\126\054\137\056" +
    "\144\057\154\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\046\147\047\117\053\126\054\137\056" +
    "\164\057\154\060\140\001\001\000\004\031\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\046\147\047\117\053\126\054\137\057\171\060\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\176\046\147\047\117\053\126\054\137" +
    "\056\175\057\154\060\140\001\001\000\004\031\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\025\202\046\147\047\117\053\126\054\137\056" +
    "\175\057\154\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\170\071\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\046\147\047" +
    "\117\053\126\054\137\056\220\057\154\060\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\170\001\001\000\024\026\143" +
    "\027\222\046\147\047\117\053\126\054\137\056\144\057" +
    "\154\060\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\046\147\047\117\053\126\054" +
    "\137\057\227\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\232\046\121\047" +
    "\117\053\126\054\120\001\001\000\002\001\001\000\004" +
    "\024\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\237\046\121\047\117\053\126\054\120\001\001" +
    "\000\002\001\001\000\020\046\147\047\117\053\126\054" +
    "\137\056\243\057\154\060\140\001\001\000\004\047\242" +
    "\001\001\000\002\001\001\000\004\031\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\046\147\047\117\053\126\054\137\056\253\057\154" +
    "\060\140\001\001\000\004\031\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\123\015" +
    "\263\016\115\017\111\046\121\047\117\053\126\054\120" +
    "\001\001\000\002\001\001\000\020\014\266\016\265\017" +
    "\111\046\121\047\117\053\126\054\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\232\017\270\046" +
    "\121\047\117\053\126\054\120\001\001\000\002\001\001" +
    "\000\022\025\274\046\147\047\117\053\126\054\137\056" +
    "\175\057\154\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\311\001" +
    "\001\000\020\046\147\047\117\053\126\054\137\056\306" +
    "\057\154\060\140\001\001\000\004\031\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\314\001\001\000\002\001\001\000" +
    "\016\016\237\017\316\046\121\047\117\053\126\054\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\117\053\126\054\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\050\012\332\013\051\055\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\337\021\063\055\060\001\001\000" +
    "\002\001\001\000\010\004\071\005\341\055\070\001\001" +
    "\000\002\001\001\000\004\063\343\001\001\000\022\014" +
    "\123\015\344\016\115\017\111\046\121\047\117\053\126" +
    "\054\120\001\001\000\002\001\001\000\004\036\346\001" +
    "\001\000\002\001\001\000\012\004\050\012\350\013\051" +
    "\055\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\356\034\357\035\355\055\354" +
    "\001\001\000\004\052\335\001\001\000\004\066\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\356\034\362\035\355\055\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\373\044\365\047\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();

	stringType.setElementType(Tab.charType);
	
	Tab.currentScope.addToLocals(new Obj (Obj.Type, "string", stringType));
	Tab.currentScope.addToLocals(new Obj (Obj.Type, "bool", boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	
	/*if(s != null && s.value != null) {
		System.out.println("\n" + s.toString() + " " + s.value.toString());
	}*/
	return s;

    }


	int statementBlocksCount = 0;
	int globalVariablesCount = 0;
	int globalConstantsCount = 0;
	int statementsInMainCount = 0;
	int fcallInMainCount = 0;
	int globalArrayDeclCount = 0;
	int functionDefinitionCount = 0;	
	int innerClassCount = 0;
	int innerClassMethodCount = 0;
	int instatiationStatementCount = 0;
	boolean arrayStarted = false;
	public Struct currentVarType = null;

	//public static void main(String[] args) throws java.lang.Exception {
	//	FileReader f = new FileReader(args[0]);
	//	Yylex skener = new Yylex(f);
	//	parser p = new parser(skener);
	//	Symbol s = p.parse();
	//}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("\nSintaksna greska", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}

	public void report_error(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if(info instanceof Symbol) {
			msg.append(" na liniji ").append(((Symbol)info).left);
		}

		System.err.println(msg.toString());
	}

	public void report_info(String message) {
		System.out.println(message);
	}
	
	public static Obj insert_symbol(int symbol_type, String name, Struct var_type) {
		Obj ret = Tab.insert(symbol_type, name, var_type);
		return ret;
	}

	public static boolean isLvalueVariable(Obj obj) {
		return obj.getKind() == Obj.Var || obj.getKind() == Obj.Fld;
	}


	public Struct stringType = new Struct(Struct.Array);
	public Struct boolType = new Struct(5);

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private Obj currMethod = null;
	private boolean inMain = false;
	private boolean mainDetected = false;
	private boolean errorDetected = false;
	private Struct currType = null;
	private String currTypeName = null;

	public void printError(String error) {
		if (error == null)
			return;

		System.err.println(error);
		errorDetected = true;
	}

	public static class Message {
		private static class _SemanticError {
			private final String semErr = "Semantic error on line ";
			public String wrongType(String type, int line) { return semErr + line + ": Data type missmatch. Use valid value for '" + type + "'."; }
			public String noTypeErr(String type, int line) { return semErr + line + ": Type '" + type + "' has not been found in symbol table."; }
			public String typeErr(String type, int line) { return semErr + line + ": Name '" + type + "' is not a valid type."; }  
			public String alreadyDeclared(String name, int line) { return semErr + line + ": Name '" + name + "' has already been declared."; }
			public String nameNotDeclaredErr(String name, int line) { return semErr + line + ": Name '" + name + "' has not been declared."; }
			public final String noMainDetected = "Semantic error: void main() not found.";
		}
		
		private static class _SemanticMessage {
			public static String constVarDecl(Obj obj, int line) { return "Constant variable '" + obj.getName() + "' declared on line " + line + "." + objNodeToString(obj); }
			public static String globalVarDecl(Obj obj, int line) { return "Global variable '" + obj.getName() + "' declared on line " + line + "." + objNodeToString(obj); }
	        	public static String usingConstant(Obj obj, int line) { return "Using constant variable '" + obj.getName() + "' on line " + line + "." + objNodeToString(obj); }
	        	public static String usingGlobal(Obj obj, int line) { return "Using global variable '" + obj.getName() + "' on line " + line + "." + objNodeToString(obj); }
	        	public static String symbolFound(Obj obj, int line) { return "Found symbol '" + obj.getName() + "' on line " + line + "." + objNodeToString(obj); }
		}

		public static final _SemanticMessage SemanticMessage = new _SemanticMessage();
		public static final _SemanticError SemanticError = new _SemanticError();
	}

	 // Print obj node ----------------------------------------------------------------------------------------------
	    private static String objNodeToString(Obj obj)
	    {
	        if (obj == null) return null;

        	StringBuilder sb = new StringBuilder(" Obj node: ");

	        // kind
        	switch (obj.getKind()) 
	        {
	            case Obj.Con:  sb.append("Con "); break;
	            case Obj.Var:  sb.append("Var "); break;
	            case Obj.Type: sb.append("Type "); break;
	            case Obj.Meth: sb.append("Meth "); break;
	            case Obj.Fld:  sb.append("Fld "); break;
	            case Obj.Prog: sb.append("Prog "); break;

        	}
        
	        sb.append(obj.getName());
	        sb.append(": ");

        	// type 
	        switch (obj.getType().getKind()) 
        	{
	            case Struct.None:   sb.append("notype"); break;
	            case Struct.Int:    sb.append("int"); break;
	            case Struct.Char:   sb.append("char"); break;
	            case Struct.Class:  sb.append("class"); break;
	            case 5:             sb.append("bool"); break;
	            case Struct.Array:  sb.append("Arr of ");
            
                    switch (obj.getType().getElemType().getKind()) 
	            {
                                case Struct.None:   sb.append("notype"); break;
                                case Struct.Int:    sb.append("int"); break;
                                case Struct.Char:   sb.append("char"); break;
                                case Struct.Class:  sb.append("class"); break;
                                case 5:             sb.append("bool"); break;
                                default: break;
                    }
            
        	    default: break;
	        }

	        sb.append(", ");
	        sb.append(obj.getAdr());
        	sb.append(", ");
	        sb.append(obj.getLevel());

        	return sb.toString();
    	}

	
	// Add constant: const int = 1...
	void addConstant(String name, Obj con, int line) {
		if (name == null || con == null || currType == null || currTypeName == null) return;

		if (currType.getKind() != con.getType().getKind()) {
			printError(Message.SemanticError.wrongType(currTypeName, line));
			return;
		}
		
		// if name is declared name, print error
		if (isDeclared(name)) {
			printError(Message.SemanticError.alreadyDeclared(name, line));
			return;
		}
		//handle string type

		Obj obj = parser.insert_symbol(Obj.Con, name, con.getType());
		obj.setAdr(con.getAdr());
		parser.globalConstantsCount++;
		parser.report_info(Message.SemanticMessage.constVarDecl(obj, line));
	}

	// Add global: int x, xy[];
	void addGlobal(String name, int line, boolean isArray) {
		if (name == null || currType == null || currTypeName == null) return;

		// if name is declared, print error
		if (isDeclared(name)) {
			printError(Message.SemanticError.alreadyDeclared(name, line));
			return;
		}

		Obj temp = null;
		if (isArray) {
			temp = Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
			parser.globalArrayDeclCount++;
		} else {
			temp = Tab.insert(Obj.Var, name, currType);
			parser.globalVariablesCount++;
		}

		parser.report_info(Message.SemanticMessage.globalVarDecl(temp, line));
		
	}

	// Add local variables
	void addLocal(String name, int line, boolean isArray) {
		if (name == null || currType == null || currMethod == null) {
			return;
		}
		
		if (!isDeclared(name)) {
			Obj temp = null;
			if (isArray) {
				Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
			} else {
				Tab.insert(Obj.Var, name, currType);
			}
		} else {
			printError(Message.SemanticError.alreadyDeclared(name, line));
		}
	}

	// Add formal parameter to current scope
	void addFormalParam(String name, int line, boolean isArray) {
		if (name == null || currType == null || currMethod == null) return;
		
		if (isDeclared(name)) {
			printError(Message.SemanticError.alreadyDeclared(name, line));
		} else {
			Obj temp = null;
			
			if (isArray) {
				temp = Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
			} else {
				temp = Tab.insert(Obj.Var, name, currType);
			}
			if (currMethod != null) {
				currMethod.setLevel(currMethod.getLevel() + 1);

				//For class too
			}
				
		}
	}

	boolean isDeclared(String name) {
		if (name  == null) {
			return true;
		}

		Obj temp = Tab.find(name);
		if (temp.getKind() == Obj.Type) {
			return true; //int int;
		}

		temp = Tab.currentScope.findSymbol(name);
		return temp != Tab.noObj && temp != null;
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Mulop ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Addop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Addop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= MOREQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= MORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= NEQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Ident ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = i;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ident",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IdentList ::= Ident 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Obj obj = null;		
		
		// local
		obj = Tab.currentScope.findSymbol(id);

		// find in class
		if (obj == null && false /* currentClass != null */) {

		}

		// global
		if (obj == null) {
			obj = Tab.find(id);
		}

		// symbol not found
		if (obj == Tab.noObj || obj == null) {
			obj = null;
			printError(Message.SemanticError.nameNotDeclaredErr(id, idleft));
		} else if (obj.getKind() != Obj.Meth) {
			parser.report_info(Message.SemanticMessage.symbolFound(obj, idleft));
		}

		//Generate some code

		RESULT = obj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IdentList ::= IdentList LBRACKET error RBRACKET 
            {
              Obj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IdentList ::= IdentList LBRACKET Expr RBRACKET 
            {
              Obj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IdentList ::= IdentList DOT Ident 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		// Currently RESULT = Obj.noObj
		RESULT = Tab.noObj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Designator ::= IdentList 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj id = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FuncCall ::= Designator 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (inMain)
			parser.fcallInMainCount++;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncCall",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= FuncCall LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		RESULT = f;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= FuncCall LPAREN RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		RESULT = f;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Designator 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = d;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		RESULT = t;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= STRCONST 
            {
              Object RESULT =null;
		
		Obj obj = new Obj(Obj.Con, "", parser.stringType);
		
		// allocate on heap len bytes

		// address on stack

		RESULT = obj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Obj obj = new Obj(Obj.Con, "", parser.boolType);
		
		obj.setAdr(i.equals("true") ? 1 : 0);
		// put on expression stack

		RESULT = obj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= LPAREN Expr NT$8 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= CHAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Obj obj = new Obj(Obj.Con, "", Tab.charType);

		obj.setAdr(i);
		// put on expression stack
		RESULT = obj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NUMBER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Obj obj = new Obj(Obj.Con, "", Tab.intType);

		obj.setAdr(i);
		// put on expression stack

		RESULT = obj;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Term ::= Factor Mulop Term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Type ::= IDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Obj obj = Tab.find(t);

		currType = null;

		if (obj == Tab.noObj) {
			printError(Message.SemanticError.noTypeErr(t, tleft));
			RESULT = null;
		} else {
			if (Obj.Type == obj.getKind()) {
				currType = obj.getType();
				currTypeName = t;
				RESULT = obj;
			} else {
				printError(Message.SemanticError.typeErr(t, tleft));
				RESULT = null;
			}
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= MINUS Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr Addop Term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondTerm ::= CondFact AND CondTerm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condition ::= CondTerm OR Condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= Expr COMMA error RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActPars ::= Expr COMMA error COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ActPars ::= Expr COMMA ActPars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LvalueOperator ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LvalueOperator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LvalueOperator ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LvalueOperator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LvalueOperator ::= ASSIGN Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LvalueOperator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Cond ::= LPAREN error RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Cond ::= LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unmatched ::= WHILE Cond unmatched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unmatched",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unmatched ::= IF Cond matched ELSE unmatched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unmatched",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unmatched ::= IF Cond Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unmatched",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // matched ::= WHILE Cond matched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // matched ::= IF Cond matched ELSE matched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // matched ::= DO matched WHILE Cond SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
			parser.statementBlocksCount++;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // matched ::= FuncCall LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // matched ::= FuncCall LPAREN ActPars RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // matched ::= FuncCall LPAREN RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // matched ::= Designator ASSIGN error SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // matched ::= Designator LvalueOperator NT$7 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matched",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$7 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		if (!parser.isLvalueVariable(d)) {
			System.out.println("Error (" + dleft + "): Variable '" + d.getName() + "' is immutable.");
		}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= unmatched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= matched 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= Statement NT$6 StatementList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =null;

			if (inMain) {
				parser.statementsInMainCount++;
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormParam ::= Type Ident LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 addFormalParam(name, nameleft, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormParam",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormParam ::= Type Ident 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addFormalParam(name, nameleft, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormParam",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= FormParam COMMA FormPars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= FormParam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunctionDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunctionDeclList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunctionDeclList ::= FunctionDecl NT$5 FunctionDeclList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Object RESULT =null;

			parser.functionDefinitionCount++;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EndOfFunction ::= 
            {
              Object RESULT =null;
		
			if (inMain == true) {
				inMain = false;
			}
			if (currMethod != null) {
				Tab.closeScope();
			}
			currMethod = null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EndOfFunction",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FuncName ::= IDENT 
            {
              Obj RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		currMethod = null;

		if(!isDeclared(fname)) {
			currMethod = Tab.insert(Obj.Meth, fname, currType);
			currMethod.setLevel(0);
			Tab.openScope();
		} else {
			printError(Message.SemanticError.alreadyDeclared(fname, fnameleft));
		}

		if (currMethod != null && fname.equals("main")) {
			inMain = true;
			mainDetected = true;
		}

		RESULT = currMethod;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncName",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= VOID NT$3 FuncName LPAREN FormPars RPAREN VarDeclList LBRACE NT$4 StatementList RBRACE EndOfFunction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
		parser.statementBlocksCount++;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

		if (m != null && currMethod != null) {
			Tab.chainLocalSymbols(currMethod);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$3 ::= 
            {
              Object RESULT =null;
 currType = Tab.noType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= Type FuncName LPAREN FormPars RPAREN VarDeclList LBRACE NT$2 StatementList RBRACE EndOfFunction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		

			if (currMethod != null) {
				Tab.closeScope();
			}
			parser.statementBlocksCount++;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

		if (m != null && currMethod != null) {
			Tab.chainLocalSymbols(currMethod);
		}

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarMethodDeclList ::= MethodDecl NT$1 VarMethodDeclList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;

			parser.innerClassMethodCount++;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarMethodDeclList ::= VarDecl VarMethodDeclList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Extends ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Extends ::= EXTENDS Ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= CLASS error RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS Ident error LBRACE VarMethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS Ident Extends LBRACE VarMethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDef ::= Ident NT$0 LBRACKET RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 addLocal(n, nleft, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDef ::= Ident 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addLocal(n, nleft, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDefList ::= VarDef COMMA VarDefList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDefList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDefList ::= VarDef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDefList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= Type error LBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecl ::= Type VarDefList SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarDef ::= Ident LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			addGlobal(id, idleft, true);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDef",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarDef ::= Ident 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			addGlobal(id, idleft, false);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDef",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarDefList ::= GlobalVarDef COMMA GlobalVarDefList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDefList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDefList ::= GlobalVarDef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDefList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarDecl ::= Type GlobalVarDefList SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstLiteral ::= STRCONST 
            {
              Obj RESULT =null;
		
			Obj con = new Obj(Obj.Con, "", parser.stringType);
			// Allocate on heap

			RESULT = con;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstLiteral",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstLiteral ::= BOOLCONST 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Obj con = new Obj(Obj.Con, "", parser.boolType);
			con.setAdr(b.equals("true") ? 1 : 0);
			RESULT = con;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstLiteral",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstLiteral ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Obj con = new Obj(Obj.Con, "", Tab.charType);
			con.setAdr(c.charValue());
			RESULT = con; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstLiteral",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstLiteral ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Obj con = new Obj(Obj.Con, "", Tab.intType);
			con.setAdr(n.intValue());
			RESULT = con;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstLiteral",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= IDENT ASSIGN ConstLiteral 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj con = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		addConstant(name, con, nameleft);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefList ::= ConstDecl COMMA ConstDefList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDefList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDefList ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDefList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalConstDecl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalConstDecl ::= CONST Type ConstDefList SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalConstDecl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;
		
		parser.innerClassCount++;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecl ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecl ::= GlobalConstDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalDeclList ::= GlobalDecl GlobalDeclList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = parser.insert_symbol(Obj.Prog, pName, Tab.noType);

		Tab.openScope();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramName",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalDeclList LBRACE FunctionDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
		Tab.chainLocalSymbols(p);
		Tab.closeScope();

		if (!mainDetected) {
			printError(Message.SemanticError.noMainDetected);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

